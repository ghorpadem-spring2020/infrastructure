{
   "AWSTemplateFormatVersion": "2010-09-09",
   "Description": "Assignemnt 8 cf stack creation for Infrastructure set up",
   "Parameters": {
      "awsRegion": {
         "Description": "Add AWS region",
         "Type": "String"
      },
      "VpcName": {
         "Description": "Please enter the IP range (CIDR notation) for VPC",
         "Type": "String"
      },
      "VpcCIDR": {
         "Description": "Please enter the IP range (CIDR notation) for VPC",
         "Type": "String"
      },
      "SubnetCIDR1": {
         "Description": "CIDR for subnet1",
         "Type": "String"
      },
      "SubnetCIDR2": {
         "Description": "CIDR for subnet2",
         "Type": "String"
      },
      "SubnetCIDR3": {
         "Description": "CIDR for subnet3",
         "Type": "String"
      },
      "AMIID": {
         "Description": "ID of the AMI from which EC2 instance needs to launch",
         "Type": "String"
      },
      "InstanceType": {
         "Description": "Instance type for EC2",
         "Type": "String",
         "Default": "t2.micro"
      },
      "MasterUsername": {
         "Description": "Master user name",
         "Type": "String"
      },
      "MasterUserPassword": {
         "Description": "Master User password",
         "Type": "String"
      },
      "RDSAllocatedStorage": {
         "Description": "RDS allocated storage",
         "Type": "String"
      },
      "DBNAME": {
         "Description": "Database name",
         "Type": "String"
      },
      "keyPairName": {
         "Description": "key pair name",
         "Type": "String"
      },
      "PolicyForS3": {
         "Description": "S3 managed policy name",
         "Type": "String"
      },
      "circleciTos3PloicyName": {
         "Description": "policy name for circle ci user to access s3 bucket",
         "Type": "String"
      },
      "circleciCodeDeployPloicyName": {
         "Description": "policy name for circleCi to use code Deploy",
         "Type": "String"
      },
      "circleCiEC2AMI": {
         "Description": "Policy for circle ci to access the AMIs",
         "Type": "String"
      },
      "CodeDeployEC2toS3": {
         "Description": "Policy for code deploy to put data from s3 to ec2",
         "Type": "String"
      },
      "ApplicationName": {
         "Description": "Code deploy application name",
         "Type": "String"
      },
      "DeploymentGroupName": {
         "Description": "Code deploy Deployment group name",
         "Type": "String"
      },
      "EC2TagKey": {
         "Description": "Tag of the EC2 instance which code deploy will deploy to",
         "Type": "String"
      },
      "EC2TagValue": {
         "Description": "Value of the EC2 tag that you want to deploy to",
         "Type": "String"
      },
      "S3buckerName": {
         "Description": "Name of the s3 bucket where we want build artifacts to be stored",
         "Type": "String"
      }
   },
   "Resources": {
      "myVPC": {
         "Type": "AWS::EC2::VPC",
         "Properties": {
            "CidrBlock": {
               "Ref": "VpcCIDR"
            },
            "EnableDnsSupport": "true",
            "EnableDnsHostnames": "true",
            "InstanceTenancy": "default",
            "Tags": [
               {
                  "Key": "vpc",
                  "Value": {
                     "Ref": "VpcName"
                  }
               }
            ]
         }
      },
      "myInternetGateway": {
         "Type": "AWS::EC2::InternetGateway",
         "Properties": {
            "Tags": [
               {
                  "Key": "internetgateway",
                  "Value": "internetgateway"
               }
            ]
         },
         "DependsOn": "myVPC"
      },
      "myVPCGatewayAttachment": {
         "Type": "AWS::EC2::VPCGatewayAttachment",
         "Properties": {
            "InternetGatewayId": {
               "Ref": "myInternetGateway"
            },
            "VpcId": {
               "Ref": "myVPC"
            }
         },
         "DependsOn": "myVPC"
      },
      "PublicSubnet1": {
         "Type": "AWS::EC2::Subnet",
         "Properties": {
            "VpcId": {
               "Ref": "myVPC"
            },
            "AvailabilityZone": {
               "Fn::Select": [
                  "0",
                  {
                     "Fn::GetAZs": ""
                  }
               ]
            },
            "CidrBlock": {
               "Ref": "SubnetCIDR1"
            },
            "MapPublicIpOnLaunch": true,
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "subnet 1"
               }
            ]
         }
      },
      "PublicSubnet2": {
         "Type": "AWS::EC2::Subnet",
         "Properties": {
            "VpcId": {
               "Ref": "myVPC"
            },
            "AvailabilityZone": {
               "Fn::Select": [
                  "1",
                  {
                     "Fn::GetAZs": ""
                  }
               ]
            },
            "CidrBlock": {
               "Ref": "SubnetCIDR2"
            },
            "MapPublicIpOnLaunch": true,
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "subnet 2"
               }
            ]
         }
      },
      "PublicSubnet3": {
         "Type": "AWS::EC2::Subnet",
         "Properties": {
            "VpcId": {
               "Ref": "myVPC"
            },
            "AvailabilityZone": {
               "Fn::Select": [
                  "2",
                  {
                     "Fn::GetAZs": ""
                  }
               ]
            },
            "CidrBlock": {
               "Ref": "SubnetCIDR3"
            },
            "MapPublicIpOnLaunch": true,
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "subnet 3"
               }
            ]
         }
      },
      "myRouteTable": {
         "Type": "AWS::EC2::RouteTable",
         "Properties": {
            "VpcId": {
               "Ref": "myVPC"
            },
            "Tags": [
               {
                  "Key": "routeTable",
                  "Value": "routeTable"
               }
            ]
         }
      },
      "mySubnetRouteTableAssociation1": {
         "Type": "AWS::EC2::SubnetRouteTableAssociation",
         "Properties": {
            "SubnetId": {
               "Ref": "PublicSubnet1"
            },
            "RouteTableId": {
               "Ref": "myRouteTable"
            }
         }
      },
      "mySubnetRouteTableAssociation2": {
         "Type": "AWS::EC2::SubnetRouteTableAssociation",
         "Properties": {
            "SubnetId": {
               "Ref": "PublicSubnet2"
            },
            "RouteTableId": {
               "Ref": "myRouteTable"
            }
         }
      },
      "mySubnetRouteTableAssociation3": {
         "Type": "AWS::EC2::SubnetRouteTableAssociation",
         "Properties": {
            "SubnetId": {
               "Ref": "PublicSubnet3"
            },
            "RouteTableId": {
               "Ref": "myRouteTable"
            }
         }
      },
      "myRoutes": {
         "Type": "AWS::EC2::Route",
         "DependsOn": "myVPCGatewayAttachment",
         "Properties": {
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
               "Ref": "myInternetGateway"
            },
            "RouteTableId": {
               "Ref": "myRouteTable"
            }
         }
      },
      "S3ManagedPolicy": {
         "Type": "AWS::IAM::ManagedPolicy",
         "DependsOn": "MyS3",
         "Properties": {
            "Description": "Policy for operations on S3 bucket",
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Action": [
                        "s3:*"
                     ],
                     "Effect": "Allow",
                     "Resource": [
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref": "MyS3"
                                 }
                              ]
                           ]
                        },
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref": "MyS3"
                                 },
                                 "/*"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            },
            "ManagedPolicyName": {
               "Ref": "PolicyForS3"
            }
         }
      },
      "circlecitoS3policy": {
         "Type": "AWS::IAM::ManagedPolicy",
         "Properties": {
            "Description": "circle ci user shoud be able to upload webapp on s3",
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Action": [
                        "s3:PutObject",
                        "s3:ListBucket"
                     ],
                     "Resource": [
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref": "S3buckerName"
                                 },
                                 "/*"
                              ]
                           ]
                        },
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref": "S3buckerName"
                                 }
                              ]
                           ]
                        }
                     ],
                     "Effect": "Allow"
                  }
               ]
            },
            "ManagedPolicyName": {
               "Ref": "circleciTos3PloicyName"
            },
            "Users": [
               "circleci"
            ]
         }
      },
      "CircleCICodeDeployPolicy": {
         "Type": "AWS::IAM::ManagedPolicy",
         "Properties": {
            "Description": "Policy for CircleCI to Call CodeDeploy",
            "ManagedPolicyName": {
               "Ref": "circleciCodeDeployPloicyName"
            },
            "Users": [
               "circleci"
            ],
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Action": [
                        "codedeploy:RegisterApplicationRevision",
                        "codedeploy:GetApplicationRevision"
                     ],
                     "Resource": [
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:codedeploy:us-east-1:",
                                 {
                                    "Ref": "AWS::AccountId"
                                 },
                                 ":application:csye6225-webapp"
                              ]
                           ]
                        }
                     ]
                  },
                  {
                     "Effect": "Allow",
                     "Action": [
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetDeployment"
                     ],
                     "Resource": [
                        "*"
                     ]
                  },
                  {
                     "Effect": "Allow",
                     "Action": [
                        "codedeploy:GetDeploymentConfig"
                     ],
                     "Resource": [
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:codedeploy:us-east-1:",
                                 {
                                    "Ref": "AWS::AccountId"
                                 },
                                 ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            }
         }
      },
      "circleciec2ami": {
         "Type": "AWS::IAM::ManagedPolicy",
         "Properties": {
            "Description": "CircleCI AMI policy",
            "ManagedPolicyName": {
               "Ref": "circleCiEC2AMI"
            },
            "Users": [
               "circleci"
            ],
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Action": [
                        "ec2:AttachVolume",
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:CopyImage",
                        "ec2:CreateImage",
                        "ec2:CreateKeypair",
                        "ec2:CreateSecurityGroup",
                        "ec2:CreateSnapshot",
                        "ec2:CreateTags",
                        "ec2:CreateVolume",
                        "ec2:DeleteKeyPair",
                        "ec2:DeleteSecurityGroup",
                        "ec2:DeleteSnapshot",
                        "ec2:DeleteVolume",
                        "ec2:DeregisterImage",
                        "ec2:DescribeImageAttribute",
                        "ec2:DescribeImages",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceStatus",
                        "ec2:DescribeRegions",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSnapshots",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeTags",
                        "ec2:DescribeVolumes",
                        "ec2:DetachVolume",
                        "ec2:GetPasswordData",
                        "ec2:ModifyImageAttribute",
                        "ec2:ModifyInstanceAttribute",
                        "ec2:ModifySnapshotAttribute",
                        "ec2:RegisterImage",
                        "ec2:RunInstances",
                        "ec2:StopInstances",
                        "ec2:TerminateInstances"
                     ],
                     "Resource": "*"
                  }
               ]
            }
         }
      },
      "codeDeployEC2S3": {
         "Type": "AWS::IAM::ManagedPolicy",
         "Properties": {
            "Description": "Code deploy ec2 s3 user policy",
            "ManagedPolicyName": {
               "Ref": "CodeDeployEC2toS3"
            },
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Action": [
                        "s3:Get*",
                        "s3:List*"
                     ],
                     "Effect": "Allow",
                     "Resource": [
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref": "S3buckerName"
                                 },
                                 "/*"
                              ]
                           ]
                        },
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref": "S3buckerName"
                                 }
                              ]
                           ]
                        }
                     ]
                  }
               ]
            }
         }
      },
      
      "myIAMRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Action": [
                        "sts:AssumeRole"
                     ],
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [
                           "ec2.amazonaws.com"
                        ]
                     }
                  }
               ]
            },
            "Description": "IAM role for ec2 to access s3 with/without code deploy",
            "ManagedPolicyArns": [
               {
                  "Ref": "S3ManagedPolicy"
               },
               {
                  "Ref": "codeDeployEC2S3"
               },
               "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
               "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"
            ],
            "Path": "/",
            "RoleName": "EC2-CSYE6225",
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "IAM for s3"
               }
            ]
         }
      },
      "CodeDeployServiceRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [
                           "codedeploy.amazonaws.com"
                        ]
                     },
                     "Action": [
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "ManagedPolicyArns": [
               "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
            ],
            "Path": "/"
         }
      },
      "CodeDeployApplication": {
         "Type": "AWS::CodeDeploy::Application",
         "Properties": {
            "ComputePlatform": "Server",
            "ApplicationName": {
               "Ref": "ApplicationName"
            }
         }
      },
      "DeploymentGroup": {
         "Type": "AWS::CodeDeploy::DeploymentGroup",
         "Properties": {
            "ApplicationName": {
               "Ref": "ApplicationName"
            },
            "DeploymentGroupName": {
               "Ref": "DeploymentGroupName"
            },
            "ServiceRoleArn": {
               "Fn::GetAtt": [
                  "CodeDeployServiceRole",
                  "Arn"
               ]
            },
            "DeploymentStyle": {
               "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
               "DeploymentType": "IN_PLACE"
            },
            "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
            "AutoRollbackConfiguration": {
               "Enabled": true,
               "Events": [
                  "DEPLOYMENT_FAILURE"
               ]
            },
            "Ec2TagFilters": [
               {
                  "Key": {
                     "Ref": "EC2TagKey"
                  },
                  "Value": {
                     "Ref": "EC2TagValue"
                  },
                  "Type": "KEY_AND_VALUE"
               }
            ]
         }
      },
      "ApplicationSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "Application Service security group",
            "GroupName": "Application",
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": 80,
                  "ToPort": 80,
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": 22,
                  "ToPort": 22,
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": 443,
                  "ToPort": 443,
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": 8080,
                  "ToPort": 8080,
                  "CidrIp": "0.0.0.0/0"
               }
            ],
            "Tags": [
               {
                  "Key": "SecurityGroup",
                  "Value": "Application Security Group"
               }
            ],
            "VpcId": {
               "Ref": "myVPC"
            }
         }
      },
      "DBSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "DB Service security group",
            "GroupName": "database",
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": 3306,
                  "ToPort": 3306,
                  "SourceSecurityGroupId": {
                     "Ref": "ApplicationSecurityGroup"
                  }
               }
            ],
            "Tags": [
               {
                  "Key": "SecurityGroup",
                  "Value": "Application Security Group"
               }
            ],
            "VpcId": {
               "Ref": "myVPC"
            }
         }
      },
      "MyS3": {
         "Type": "AWS::S3::Bucket",
         "Properties": {
            "AccessControl": "Private",
            "BucketEncryption": {
               "ServerSideEncryptionConfiguration": [
                  {
                     "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                     }
                  }
               ]
            },
            "ObjectLockEnabled": false,
            "PublicAccessBlockConfiguration": {
               "BlockPublicAcls": true,
               "BlockPublicPolicy": true
            },
            "LifecycleConfiguration": {
               "Rules": [
                  {
                     "AbortIncompleteMultipartUpload": {
                        "DaysAfterInitiation": 1
                     },
                     "Status": "Enabled"
                  },
                  {
                     "NoncurrentVersionTransitions": [
                        {
                           "StorageClass": "STANDARD_IA",
                           "TransitionInDays": 30
                        }
                     ],
                     "Status": "Enabled"
                  }
               ]
            },
            "Tags": [
               {
                  "Key": "s3BucketFromCF",
                  "Value": "s3fromCF"
               }
            ]
         }
      },
      "MyDBSubnetGroup": {
         "Type": "AWS::RDS::DBSubnetGroup",
         "Properties": {
            "DBSubnetGroupDescription": "Include private subnets",
            "SubnetIds": [
               {
                  "Ref": "PublicSubnet2"
               },
               {
                  "Ref": "PublicSubnet3"
               }
            ],
            "Tags": [
               {
                  "Key": "DBsubnet",
                  "Value": "SubentgroupIncludeSubnet2Subnet3"
               }
            ]
         }
      },
      "MyRDS": {
         "Type": "AWS::RDS::DBInstance",
         "Properties": {
            "AllocatedStorage": {
               "Ref": "RDSAllocatedStorage"
            },
            "AllowMajorVersionUpgrade": false,
            "AutoMinorVersionUpgrade": true,
            "DBInstanceClass": "db.t3.micro",
            "DBInstanceIdentifier": "csye6225-spring2020",
            "DBName": {
               "Ref": "DBNAME"
            },
            "DBSubnetGroupName": {
               "Ref": "MyDBSubnetGroup"
            },
            "Engine": "MariaDB",
            "EngineVersion": "10.2.21",
            "MasterUsername": {
               "Ref": "MasterUsername"
            },
            "MasterUserPassword": {
               "Ref": "MasterUserPassword"
            },
            "MultiAZ": false,
            "Port": "3306",
            "PubliclyAccessible": false,
            "Tags": [
               {
                  "Key": "myRDSInstance",
                  "Value": "MyRDSInstanceMariadb"
               }
            ],
            "VPCSecurityGroups": [
               {
                  "Ref": "DBSecurityGroup"
               }
            ]
         }
      },
      "IAMInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [
               {
                  "Ref": "myIAMRole"
               }
            ]
         }
      },
      "MyEC2": {
         "Type": "AWS::EC2::Instance",
         "DependsOn": "myVPCGatewayAttachment",
         "Properties": {
            "AdditionalInfo": "EC2 built from my AMI for running web app",
            "AvailabilityZone": {
               "Fn::Select": [
                  "0",
                  {
                     "Fn::GetAZs": ""
                  }
               ]
            },
            "ImageId": {
               "Ref": "AMIID"
            },
            "InstanceType": {
               "Ref": "InstanceType"
            },
            "IamInstanceProfile": {
               "Ref": "IAMInstanceProfile"
            },
            "BlockDeviceMappings": [
               {
                  "DeviceName": "/dev/sdm",
                  "Ebs": {
                     "VolumeType": "gp2",
                     "DeleteOnTermination": "true",
                     "VolumeSize": "20"
                  }
               }
            ],
            "NetworkInterfaces": [
               {
                  "SubnetId": {
                     "Ref": "PublicSubnet1"
                  },
                  "AssociatePublicIpAddress": "true",
                  "DeviceIndex": "0",
                  "GroupSet": [
                     {
                        "Ref": "ApplicationSecurityGroup"
                     }
                  ]
               }
            ],
            "KeyName": {
               "Ref": "keyPairName"
            },
            "Tags": [
               {
                  "Key": {
                     "Ref": "EC2TagKey"
                  },
                  "Value": {
                     "Ref": "EC2TagValue"
                  }
               }
            ],
            "Tenancy": "default",
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "",
                     [
                        "#!/bin/bash \n",
                        "sudo apt-get update \n",
                        "sudo apt install unzip \n",
                        "echo export DB_HOST=",
                        {
                           "Fn::GetAtt": [
                              "MyRDS",
                              "Endpoint.Address"
                           ]
                        },
                        " >> /etc/environment \n",
                        "echo export DB_PORT=",
                        {
                           "Fn::GetAtt": [
                              "MyRDS",
                              "Endpoint.Port"
                           ]
                        },
                        " >> /etc/environment \n",
                        "echo export DB_USERNAME=",
                        {
                           "Ref": "MasterUsername"
                        },
                        " >> /etc/environment \n",
                        "echo export DB_PASSWORD=",
                        {
                           "Ref": "MasterUserPassword"
                        },
                        " >> /etc/environment \n",
                        "echo export S3_BUCKET=",
                        {
                           "Ref": "MyS3"
                        },
                        " >> /etc/environment \n",
                        "echo export AWS_REGION=",
                        {
                           "Ref": "awsRegion"
                        },
                        " >> /etc/environment \n",
                        "echo export DBNAME=",
                        {
                           "Ref": "DBNAME"
                        },
                        ">> /etc/environment \n"
                     ]
                  ]
               }
            }
         }
      }
   }
}